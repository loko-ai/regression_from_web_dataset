{
  "name": "regression_from_web_dataset",
  "id": "regression_from_web_dataset",
  "description": "",
  "created_on": "11/04/2023, 09:52:58",
  "last_modify": "11/04/2023, 16:02:08",
  "graphs": {
    "main": {
      "nodes": [
        {
          "id": "f29a27e2-2aff-48c3-b9ae-f052edd26845",
          "position": {
            "x": 481,
            "y": 141
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 164,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "HTTP Request",
            "events": null,
            "description": "### Description\nThe HTTP REQUEST component is used to make HTTP requests in the web to microservices external to the LOKO AI platform.\n\n### Input\nInput is only required for HTTP methods that have or require a body (PUT/PATCH/POST). In this case there is no predefined input format.\n\n### Output\nIn this case there is no fixed output format.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "type": "text",
                  "name": "url",
                  "label": "URL",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "method",
                  "label": "Method",
                  "type": "select",
                  "options": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "accept",
                  "label": "Accept",
                  "type": "select",
                  "options": [
                    "text",
                    "json",
                    "file"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "query",
                  "label": "Query params",
                  "type": "multiKeyValue",
                  "fields": [
                    {
                      "name": "key",
                      "placeholder": "Key",
                      "validation": {
                        "required": "Required field"
                      }
                    },
                    {
                      "name": "value",
                      "placeholder": "Value",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": "Launch request",
              "icon": "RiUploadCloud2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "url": "https://raw.githubusercontent.com/loko-ai/regression_from_web_dataset/master/data/diabetes.json",
                "method": "GET",
                "accept": "text"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 481,
            "y": 141
          },
          "__class__": "Node"
        },
        {
          "id": "f12c9953-6d84-4acd-8c0d-58767cb3f199",
          "position": {
            "x": 784,
            "y": 226
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 72,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "data2stream",
                "debug": true,
                "propagate": true,
                "notify_warnings": true,
                "code": "for row in data:\n  yield row"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 784,
            "y": 226
          },
          "__class__": "Node"
        },
        {
          "id": "af7613e4-3ebd-4e8a-9a3f-d5093d11b0ce",
          "position": {
            "x": 1035,
            "y": 186
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "microservice": "predictor",
            "name": "Predictor",
            "events": {
              "type": "predictor",
              "field": "predictor"
            },
            "description": "### Description\nThe PREDICTOR component is one of the most sophisticated in Loko AI, and deals with the training, prediction and evaluation of ML models. \n\nIts configuration and function in the flow are described below to give the user a general understanding of how this can be used.\n\n### Input\nTo transmit the data of the PREDICTOR component as input, you can operate in two ways, choosing to set the parameter **Stream Data** to **True** or **False**.\n\nIn the first case it is possible to pass the samples one at a time: in this way the data will be passed as dictionaries:\n```json\n{\"data\": {\"text\":\"Today is a beautiful day\"}, \"target\": \"class01\"}\n```\n\nIn the second case, ie by setting this parameter as False, the data will be transmitted all at once as a list of dictionaries:\n```json\n{\"data\": [{\"text\":\"Today is a beautiful day\"}, {\"text\":\"Today is a bad day\"}], \"target\": [\"class01\",\"class02\"]}\n```\n\nAnother parameter related to data input is target.\n\nBy setting the name of the target variable, there is no need to split the variables into date and target.\n\nSupposing to read a line of a csv as:\n```json\n{\"text\":\"Today is a beautiful day\", \"label\": \"class01\"}\n```\n\nsetting the target variable to label, the PREDICTOR component will automatically interpret all variables other than the target variable as explanatory and the variable label as the response variable. In this way it is not necessary to divide the data in the two keys before hand data and target.\n\nAs for fit and evaluate of PREDICTOR, it is necessary to supply both the variable data and the variable target.\n\nConversely, as far as concerned Predict is, the target variable is not required.\n\n### Output\nThe output of theservice fit will only provide as response: Job submitted.\n\nThis means that the PREDICTOR training has started correctly. You will be able to check the results obtained through the appropriate dashboard.\n\nAs for the predict, the output is the following:\n```json\n{\"prediction\": \"class01\", \"object\": {\"text\":\"Today is a beautiful day\"}}\n```\n\nFinally, the evaluate has a more complex:\n```json\n{\"tdist\": distribution of the target variable provided\n \"report_test\": metrics used for the evaluation of the model (vary according to the task)\n \"datetime\": date and time\n \"task\": classification or regression\n}\n```",
            "inputs": [
              {
                "id": "fit",
                "label": "fit",
                "closed": false
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "DS4Biz",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "service",
                  "type": "service",
                  "label": "Available services",
                  "fragment": "predictor",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "predictor",
                  "type": "dynamic",
                  "dynamicType": "dependent",
                  "parent": "service",
                  "label": "Predictors",
                  "fragment": "predictors",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "stream",
                  "type": "boolean",
                  "label": "Stream data"
                },
                {
                  "name": "target_y",
                  "type": "text",
                  "label": "Target name",
                  "helper": "Name of the features you want to estimate, if not specified the default feature name is \"target\""
                },
                {
                  "name": "partial_fit",
                  "type": "boolean",
                  "label": "Partial fit",
                  "group": "Fit parameters"
                },
                {
                  "name": "save_dataset",
                  "type": "select",
                  "options": [
                    "yes",
                    "no"
                  ],
                  "label": "Save dataset",
                  "helper": "save testset to compute the metrics report for partial fit task",
                  "group": "Fit parameters"
                },
                {
                  "name": "report",
                  "type": "boolean",
                  "label": "Compute metrics report",
                  "group": "Fit parameters"
                },
                {
                  "name": "test_size",
                  "type": "dynamic",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "options": [
                    0.1,
                    0.2,
                    0.3,
                    0.4,
                    0.5
                  ],
                  "label": "Test size",
                  "group": "Fit parameters"
                },
                {
                  "name": "cv",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "type": "select",
                  "options": [
                    0,
                    2,
                    3,
                    4,
                    5
                  ],
                  "label": "Number of folds used for cross-validation",
                  "group": "Fit parameters"
                },
                {
                  "name": "history_limit",
                  "type": "select",
                  "options": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Number of models to keep saved",
                  "group": "Fit parameters"
                },
                {
                  "name": "fit_params",
                  "type": "area",
                  "label": "Additional fit parameters",
                  "group": "Fit parameters"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "group": "Predict parameters"
                },
                {
                  "name": "predict_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Predict parameters"
                },
                {
                  "name": "limit",
                  "type": "select",
                  "options": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Limit",
                  "helper": "set to 0 to evalute only last model, set to -1 to evaluate all models in history",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "eval_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": null,
              "icon": "RiTyphoonFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "stream": true,
                "target_y": "target",
                "propagate": true,
                "partial_fit": false,
                "save_dataset": "no",
                "report": true,
                "cv": "0",
                "history_limit": "0",
                "fit_params": "{}",
                "include_probs": false,
                "predict_branch": "development",
                "limit": "0",
                "eval_branch": "development",
                "test_size": "0.2",
                "service": "predictor",
                "predictor": "diabetes"
              }
            },
            "disabled": false,
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1035,
            "y": 186
          },
          "__class__": "Node"
        },
        {
          "id": "d8ecd421-92af-449d-ba14-ee8da7199a34",
          "position": {
            "x": 442,
            "y": 88
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 794,
          "height": 276,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "STEP1: Model training",
            "fill": "#577590",
            "height": 276,
            "width": 794
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 442,
            "y": 88
          },
          "__class__": "Node"
        },
        {
          "id": "eaeaa805-8630-43cd-a0c8-ddf7a534808f",
          "position": {
            "x": 466,
            "y": 532
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Route",
            "events": null,
            "description": "### Description\nThe ROUTE component is used to create a web server listening on a specific address and a specific HTTP method.\n\n### Input\nThe component has no input.\n\n### Output\nIn this case there is no fixed output format.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "path",
                  "type": "path",
                  "helper": "Insert a path without '/' at start"
                }
              ],
              "click": null,
              "icon": "RiCloudyFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "path": "predict"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 466,
            "y": 532
          },
          "__class__": "Node"
        },
        {
          "id": "1f82a4e3-2f53-40b5-8378-dbdbb1e7266f",
          "position": {
            "x": 697,
            "y": 474
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "propagate": true,
                "notify_warnings": true,
                "code": "return data.json"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 697,
            "y": 474
          },
          "__class__": "Node"
        },
        {
          "id": "7cb8ec0d-2faf-4042-b604-dca59e46dc8f",
          "position": {
            "x": 928,
            "y": 538
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "microservice": "predictor",
            "name": "Predictor",
            "events": {
              "type": "predictor",
              "field": "predictor"
            },
            "description": "### Description\nThe PREDICTOR component is one of the most sophisticated in Loko AI, and deals with the training, prediction and evaluation of ML models. \n\nIts configuration and function in the flow are described below to give the user a general understanding of how this can be used.\n\n### Input\nTo transmit the data of the PREDICTOR component as input, you can operate in two ways, choosing to set the parameter **Stream Data** to **True** or **False**.\n\nIn the first case it is possible to pass the samples one at a time: in this way the data will be passed as dictionaries:\n```json\n{\"data\": {\"text\":\"Today is a beautiful day\"}, \"target\": \"class01\"}\n```\n\nIn the second case, ie by setting this parameter as False, the data will be transmitted all at once as a list of dictionaries:\n```json\n{\"data\": [{\"text\":\"Today is a beautiful day\"}, {\"text\":\"Today is a bad day\"}], \"target\": [\"class01\",\"class02\"]}\n```\n\nAnother parameter related to data input is target.\n\nBy setting the name of the target variable, there is no need to split the variables into date and target.\n\nSupposing to read a line of a csv as:\n```json\n{\"text\":\"Today is a beautiful day\", \"label\": \"class01\"}\n```\n\nsetting the target variable to label, the PREDICTOR component will automatically interpret all variables other than the target variable as explanatory and the variable label as the response variable. In this way it is not necessary to divide the data in the two keys before hand data and target.\n\nAs for fit and evaluate of PREDICTOR, it is necessary to supply both the variable data and the variable target.\n\nConversely, as far as concerned Predict is, the target variable is not required.\n\n### Output\nThe output of theservice fit will only provide as response: Job submitted.\n\nThis means that the PREDICTOR training has started correctly. You will be able to check the results obtained through the appropriate dashboard.\n\nAs for the predict, the output is the following:\n```json\n{\"prediction\": \"class01\", \"object\": {\"text\":\"Today is a beautiful day\"}}\n```\n\nFinally, the evaluate has a more complex:\n```json\n{\"tdist\": distribution of the target variable provided\n \"report_test\": metrics used for the evaluation of the model (vary according to the task)\n \"datetime\": date and time\n \"task\": classification or regression\n}\n```",
            "inputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "outputs": [
              {
                "id": "fit",
                "label": "fit"
              },
              {
                "id": "predict",
                "label": "predict"
              },
              {
                "id": "evaluate",
                "label": "evaluate"
              }
            ],
            "configured": true,
            "options": {
              "group": "DS4Biz",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "service",
                  "type": "service",
                  "label": "Available services",
                  "fragment": "predictor",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "predictor",
                  "type": "dynamic",
                  "dynamicType": "dependent",
                  "parent": "service",
                  "label": "Predictors",
                  "fragment": "predictors",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "stream",
                  "type": "boolean",
                  "label": "Stream data"
                },
                {
                  "name": "target_y",
                  "type": "text",
                  "label": "Target name",
                  "helper": "Name of the features you want to estimate, if not specified the default feature name is \"target\""
                },
                {
                  "name": "partial_fit",
                  "type": "boolean",
                  "label": "Partial fit",
                  "group": "Fit parameters"
                },
                {
                  "name": "save_dataset",
                  "type": "select",
                  "options": [
                    "yes",
                    "no"
                  ],
                  "label": "Save dataset",
                  "helper": "save testset to compute the metrics report for partial fit task",
                  "group": "Fit parameters"
                },
                {
                  "name": "report",
                  "type": "boolean",
                  "label": "Compute metrics report",
                  "group": "Fit parameters"
                },
                {
                  "name": "test_size",
                  "type": "dynamic",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "options": [
                    0.1,
                    0.2,
                    0.3,
                    0.4,
                    0.5
                  ],
                  "label": "Test size",
                  "group": "Fit parameters"
                },
                {
                  "name": "cv",
                  "dynamicType": "select",
                  "parent": "report",
                  "condition": "{parent}===true",
                  "type": "select",
                  "options": [
                    0,
                    2,
                    3,
                    4,
                    5
                  ],
                  "label": "Number of folds used for cross-validation",
                  "group": "Fit parameters"
                },
                {
                  "name": "history_limit",
                  "type": "select",
                  "options": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Number of models to keep saved",
                  "group": "Fit parameters"
                },
                {
                  "name": "fit_params",
                  "type": "area",
                  "label": "Additional fit parameters",
                  "group": "Fit parameters"
                },
                {
                  "name": "include_probs",
                  "type": "boolean",
                  "label": "Predict proba",
                  "group": "Predict parameters"
                },
                {
                  "name": "predict_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Predict parameters"
                },
                {
                  "name": "limit",
                  "type": "select",
                  "options": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                  ],
                  "label": "Limit",
                  "helper": "set to 0 to evalute only last model, set to -1 to evaluate all models in history",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "eval_branch",
                  "type": "select",
                  "options": [
                    "development",
                    "master"
                  ],
                  "label": "Branch",
                  "helper": "fit task automatically saves model on development branch",
                  "group": "Evaluate parameters"
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                }
              ],
              "click": null,
              "icon": "RiTyphoonFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "stream": false,
                "target_y": "",
                "propagate": true,
                "partial_fit": false,
                "save_dataset": "no",
                "report": true,
                "cv": "0",
                "history_limit": "0",
                "fit_params": "{}",
                "include_probs": false,
                "predict_branch": "development",
                "limit": "0",
                "eval_branch": "development",
                "test_size": "0.2",
                "service": "predictor",
                "predictor": "diabetes"
              }
            },
            "disabled": false,
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 928,
            "y": 538
          },
          "__class__": "Node"
        },
        {
          "id": "968f77bb-a3fb-401c-990d-a3d2f88eb2ce",
          "position": {
            "x": 1187,
            "y": 490
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Response",
            "events": null,
            "description": "### Description\nThe RESPONSE component is used to set the type of response output that should be sent upon receipt of an HTTP request captured by a **Route** component.\n\n### Input\nIn this case there is no fixed input format.\n\n### Output\nThe component has no output.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "options": [
                    "html",
                    "json"
                  ],
                  "label": "Response Type",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": null,
              "icon": "RiDownloadCloud2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "type": "json"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1187,
            "y": 490
          },
          "__class__": "Node"
        },
        {
          "id": "725b8d22-9429-4ec0-b8f5-0cc479fbaaf9",
          "position": {
            "x": 440,
            "y": 400
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 975,
          "height": 248,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "STEP2: Expose service",
            "fill": "#577590",
            "height": 248,
            "width": 975
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 440,
            "y": 400
          },
          "__class__": "Node"
        },
        {
          "id": "4a7e4979-6bc1-4455-ac07-b8054208ad9b",
          "position": {
            "x": 536.2064484459743,
            "y": 808.3090847423554
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "type": "Object",
                "value": "  {\n    \"age\": 0.0380759064,\n    \"sex\": 0.0506801187,\n    \"bmi\": 0.0616962065,\n    \"bp\": 0.0218723855,\n    \"s1\": -0.0442234984,\n    \"s2\": -0.0348207628,\n    \"s3\": -0.0434008457,\n    \"s4\": -0.002592262,\n    \"s5\": 0.0199074862,\n    \"s6\": -0.0176461252\n  }"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 536.2064484459743,
            "y": 808.3090847423554
          },
          "__class__": "Node"
        },
        {
          "id": "3f32b7a9-3c68-498c-9de7-f51cb57711f2",
          "position": {
            "x": 795.8327910376041,
            "y": 757.0983841394192
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 164,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "HTTP Request",
            "events": null,
            "description": "### Description\nThe HTTP REQUEST component is used to make HTTP requests in the web to microservices external to the LOKO AI platform.\n\n### Input\nInput is only required for HTTP methods that have or require a body (PUT/PATCH/POST). In this case there is no predefined input format.\n\n### Output\nIn this case there is no fixed output format.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "type": "text",
                  "name": "url",
                  "label": "URL",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "method",
                  "label": "Method",
                  "type": "select",
                  "options": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "accept",
                  "label": "Accept",
                  "type": "select",
                  "options": [
                    "text",
                    "json",
                    "file"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "query",
                  "label": "Query params",
                  "type": "multiKeyValue",
                  "fields": [
                    {
                      "name": "key",
                      "placeholder": "Key",
                      "validation": {
                        "required": "Required field"
                      }
                    },
                    {
                      "name": "value",
                      "placeholder": "Value",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": "Launch request",
              "icon": "RiUploadCloud2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "url": "http://gateway:8080/routes/orchestrator/endpoints/regression_from_web_dataset/predict",
                "method": "POST",
                "accept": "json"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 795.8327910376041,
            "y": 757.0983841394192
          },
          "__class__": "Node"
        },
        {
          "id": "7b2a8dba-2b5c-4238-a090-fd4a7f2e2d94",
          "position": {
            "x": 459.2871061508345,
            "y": 692.088507100776
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 566,
          "height": 235,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "STE3: Test service",
            "fill": "#F74B65",
            "height": 235,
            "width": 566
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 459.2871061508345,
            "y": 692.088507100776
          },
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-f12c9953-6d84-4acd-8c0d-58767cb3f199output-af7613e4-3ebd-4e8a-9a3f-d5093d11b0cefit",
          "source": "f12c9953-6d84-4acd-8c0d-58767cb3f199",
          "sourceHandle": "output",
          "target": "af7613e4-3ebd-4e8a-9a3f-d5093d11b0ce",
          "targetHandle": "fit",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#FFB300"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-f29a27e2-2aff-48c3-b9ae-f052edd26845output-f12c9953-6d84-4acd-8c0d-58767cb3f199input",
          "source": "f29a27e2-2aff-48c3-b9ae-f052edd26845",
          "sourceHandle": "output",
          "target": "f12c9953-6d84-4acd-8c0d-58767cb3f199",
          "targetHandle": "input",
          "data": {
            "startColor": "#56A6DC",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-eaeaa805-8630-43cd-a0c8-ddf7a534808foutput-1f82a4e3-2f53-40b5-8378-dbdbb1e7266finput",
          "source": "eaeaa805-8630-43cd-a0c8-ddf7a534808f",
          "sourceHandle": "output",
          "target": "1f82a4e3-2f53-40b5-8378-dbdbb1e7266f",
          "targetHandle": "input",
          "data": {
            "startColor": "#56A6DC",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-1f82a4e3-2f53-40b5-8378-dbdbb1e7266foutput-7cb8ec0d-2faf-4042-b604-dca59e46dc8fpredict",
          "source": "1f82a4e3-2f53-40b5-8378-dbdbb1e7266f",
          "sourceHandle": "output",
          "target": "7cb8ec0d-2faf-4042-b604-dca59e46dc8f",
          "targetHandle": "predict",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#FFB300"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-7cb8ec0d-2faf-4042-b604-dca59e46dc8fpredict-968f77bb-a3fb-401c-990d-a3d2f88eb2ceinput",
          "source": "7cb8ec0d-2faf-4042-b604-dca59e46dc8f",
          "sourceHandle": "predict",
          "target": "968f77bb-a3fb-401c-990d-a3d2f88eb2ce",
          "targetHandle": "input",
          "data": {
            "startColor": "#FFB300",
            "stopColor": "#56A6DC"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-4a7e4979-6bc1-4455-ac07-b8054208ad9boutput-3f32b7a9-3c68-498c-9de7-f51cb57711f2input",
          "source": "4a7e4979-6bc1-4455-ac07-b8054208ad9b",
          "sourceHandle": "output",
          "target": "3f32b7a9-3c68-498c-9de7-f51cb57711f2",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#56A6DC"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    }
  },
  "open": [
    "main"
  ],
  "active": "main",
  "version": "1.0.0",
  "__class__": "Project"
}